user       root root;  ## Default: nobody
worker_processes  2;  ## Default: 1
error_log  logs/error.log;
pid        logs/nginx.pid;
worker_rlimit_nofile 8192;
pcre_jit on;


events {
  worker_connections  4096;  ## Default: 1024
}

http {
    sendfile on;
    tcp_nopush on;
    include /etc/nginx/proxy.conf;

    default_type application/json;

    log_format access '$remote_addr - $remote_user [$time_local]  $status "$request" $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
    access_log logs/access.log access;

    # lua shared dict
    lua_shared_dict my_limit_req_store 100m;

    # set search paths for pure Lua external libraries (';;' is the default path):
    lua_package_path "/etc/nginx/scripts/?.lua;;";

    # load lua modules on nginx start
    init_by_lua_block {
        require "hello";
    }

    server {
        listen 80;

        location / {
            proxy_pass http://127.0.0.1:8888;
        }

        location /lua {
            content_by_lua_block {
                ngx.say('hello lua!')
            }
        }

        location /lua/greet {
            content_by_lua_block {
                local hello = require "hello"
                hello.greet("lua")
            }
        }

        location /lua/auth {
            access_by_lua_block {
                local auth = require "auth"
                local ret = auth.run()
                if not ret then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
            }

            proxy_pass http://127.0.0.1:8888;
        }

        location /lua/limit/ip {
            access_by_lua_block {
                local limit_ip = require "limit_ip"
                local ret = limit_ip.run()
                --if not ret then
                --    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                --end
            }

            proxy_pass http://127.0.0.1:8888;
        }

        location /lua/http {
            content_by_lua_block {
                local http = require "http"
                http.run()
            }
        }


    }
}
